image: resin/raspberrypi3-python:latest

stages:
  - build
  - test
  - deploy

build:
  stage: build
  image: docker:git
  services:
    - docker:dind
  script:
    - setup_docker
    - build
  variables:
    DOCKER_DRIVER: overlay2
  only:
    - branches
    - master

test:
  stage: test
  script:
    - exit 0
  only:
    - branches
    - master

deploy:
  image: 1drop/docker:git
  stage: deploy
  when: manual
  environment:
    name: production
  before_script:
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - apt-get install socat
  script:
    - deploy
  only:
    - master

.auto_devops: &auto_devops |
  [[ "$TRACE" ]] && set -x
  export CI_REGISTRY="index.docker.io"
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY/$CI_PROJECT_PATH
  export CI_APPLICATION_TAG=$CI_COMMIT_REF_SLUG
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}

  function setup_docker() {
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }

  function build() {

    echo "Building Dockerfile-based application..."
    echo `git show --format="%h" HEAD | head -1` > build_info.txt
    echo `git rev-parse --abbrev-ref HEAD` >> build_info.txt
    docker build -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
    echo "docker username: $HUB_DOCKER_USERNAME"
    if [[ -n "$HUB_DOCKER_USERNAME" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$HUB_DOCKER_USERNAME" -p "$HUB_DOCKER_PASSWORD"
      echo ""
    fi

    echo "Pushing to GitLab Container Registry..."
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    echo ""
  }

  function deploy() {


    REMOTE=gitlab-runner@192.168.19.3 # todo: change here
    #TYPO3_IMAGE=registry.gitlab.com/vendor/customer/typo3 # todo: change here

    echo " * OPENING DOCKER SOCKET TUNNEL"
    socat \
      "UNIX-LISTEN:/tmp/docker.sock,reuseaddr,fork" \
      "EXEC:'ssh -kTax $REMOTE socat STDIO UNIX-CONNECT\:/var/run/docker.sock'" \
      &
      export DOCKER_HOST=unix:///tmp/docker.sock
    export COMPOSE_PROJECT_NAME=tbot # todo: change here
    #echo " * LOGIN WITH GITLAB-CI TOKEN"
    #docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    # backup current image if already present locally
    #if [[ ! "$(docker images -q ${TYPO3_IMAGE} 2> /dev/null)" == "" ]]; then
    #echo " * BACKING UP CURRENT IMAGE VERSION"
    #docker tag ${TYPO3_IMAGE} typo3-backup
    #fi
    echo " * PULLING NEW IMAGES"
    docker-compose -f docker-compose.yml pull
    echo " * UPDATING RUNNING CONTAINERS"
    docker-compose -f docker-compose.yml up -d
    echo " * CLEANING OLD IMAGES"
    ssh -t ${REMOTE} "docker-clean images"
  }

before_script:
  - *auto_devops
